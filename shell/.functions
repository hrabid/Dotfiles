# check if the shell is interactive 
[[ $- != *i* ]] && return

# Enable Bash bash_completion 
if [[ -f /usr/share/bash-completion/bash_completion ]]; then
    source /usr/share/bash-completion/bash_completion
elif [[ -f /etc/bash_completion ]]; then
    source /etc/bash_completion
fi
bind "set completion-ignore-case on" 2>/dev/null
bind "set show-all-if-ambiguous on" 2>/dev/null


# XDG Base Directory Specification
export XDG_CONFIG_HOME="$HOME/.config"
export XDG_DATA_HOME="$HOME/.local/share"
export XDG_STATE_HOME="$HOME/.local/state"
export XDG_CACHE_HOME="$HOME/.cache"

# Default editors
export EDITOR="nvim"
export VISUAL="nvim"

# Enhanced cd with auto-ls
cd() {
    if [[ $# -eq 0 ]]; then
        builtin cd ~ && ls -a
    else
        builtin cd "$@" && ls -a
    fi
}

# Get internal and external IP
myip() {
    echo "Internal IP:"
    ip route get 1.1.1.1 | awk '{print $7}' 2>/dev/null || echo "Not connected"
    echo "External IP:"
    curl -s ifconfig.me || echo "Unable to fetch"
}

# Changing default for man page to nvim

set -o vi
export MANPAGER='nvim +Man!'


nf() {
    fzf --preview 'bat --style=numbers --color=always {} | head -n 100' \
        --bind 'enter:execute(nvim {})'
}

# Extracting archive & compressed file 
extract() {
  for file in "$@"; do
    if [[ -f "$file" ]]; then
      case "$file" in
      *.tar.bz2) tar xjf "$file" ;;
      *.tar.gz) tar xzf "$file" ;;
      *.tar.xz) tar xJf "$file" ;;
      *.bz2) bunzip2 "$file" ;;
      *.rar) unrar x "$file" ;;
      *.gz) gunzip "$file" ;;
      *.tar) tar xf "$file" ;;
      *.tbz2) tar xjf "$file" ;;
      *.tgz) tar xzf "$file" ;;
      *.zip) unzip "$file" ;;
      *.Z) uncompress "$file" ;;
      *.7z) 7z x "$file" ;;
      *) echo "Unknown archive format: $file" ;;
      esac
    else
      echo "File not found: $file"
    fi
  done
}

# Create directory and cd into it
mkcd() {
  mkdir -p "$1" && cd "$1"
}

# Add a directory to PATH
apath() {
    for d in "$@"; do
        [[ -d "$d" && ! ":$PATH:" =~ (^|:)$d(:|$) ]] && PATH="$PATH:$d"
    done
}

# Remove a directory from PATH
rpath() {
    for d in "$@"; do
        if [[ ":$PATH:" == *":$d:"* ]]; then
            PATH=$(printf "%s" "$PATH" | awk -v RS=: -v ORS=: '$0 != "'"$d"'"' | sed 's/:$//')
        fi
    done
}

# Human readable path breakdown 
lspath() {
    echo $PATH | tr ':' '\n'
}

# Detect Linux distribution
get_distro() {
    if [[ -f /etc/os-release ]]; then
        source /etc/os-release
        case "$ID" in
            fedora|rhel|centos|rocky|almalinux) echo "redhat" ;;
            ubuntu|debian|mint) echo "debian" ;;
            arch|manjaro|endeavouros) echo "arch" ;;
            opensuse*|sles) echo "suse" ;;
            gentoo) echo "gentoo" ;;
            *) echo "unknown" ;;
        esac
    else
        echo "unknown"
    fi
}


DISTRO=$(get_distro)
case "$DISTRO" in
    "debian")
        alias install='sudo apt install'
        alias update='sudo apt update && sudo apt upgrade'
        alias search='apt search'
        alias remove='sudo apt remove'
        ;;
    "redhat")
        alias install='sudo dnf install'
        alias update='sudo dnf update'
        alias search='dnf search'
        alias remove='sudo dnf remove'
        ;;
    "arch")
        alias install='sudo pacman -S'
        alias update='sudo pacman -Syu'
        alias search='pacman -Ss'
        alias remove='sudo pacman -R'
        ;;
esac

# Fetching system info 
#command -v fastfetch >/dev/null 2>&1 && fastfetch
